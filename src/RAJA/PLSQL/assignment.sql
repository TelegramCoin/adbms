-- note Qus. What are CURSOR & REF CURSOR , they are not data type

SET SERVEROUTPUT ON;

-- note Create procedure which returns CURSOR

CREATE OR REPLACE PROCEDURE P_GET_EMP_CUR (CUR_EMP OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN CUR_EMP FOR SELECT * FROM EMPLOYEE;
END;
/

DECLARE
  CUR_EMP SYS_REFCURSOR;
  RT_ITERATOR EMPLOYEE%ROWTYPE;
BEGIN
  P_GET_EMP_CUR(CUR_EMP);
  LOOP
    FETCH CUR_EMP INTO RT_ITERATOR;
    DBMS_OUTPUT.PUT_LINE(RT_ITERATOR.EMPNAME);
    EXIT WHEN CUR_EMP%NOTFOUND;
  END LOOP;
END;
/
-- note declare procedure inside anonymous block

DECLARE
  TYPE EMP_REFCURSOR IS REF CURSOR;
  CUR_EMP EMP_REFCURSOR;
  RT_ITERATOR EMPLOYEE%ROWTYPE;
  PROCEDURE P_GET_EMP_CUR (CUR_EMP OUT EMP_REFCURSOR)
    IS
  BEGIN
    OPEN CUR_EMP FOR SELECT * FROM EMPLOYEE;
  END;
BEGIN
  P_GET_EMP_CUR(CUR_EMP);
  LOOP
    FETCH CUR_EMP INTO RT_ITERATOR;
    DBMS_OUTPUT.PUT_LINE(RT_ITERATOR.EMPNAME);
    EXIT WHEN CUR_EMP%NOTFOUND;
  END LOOP;
END;
/

--

-- note Create function which returns CURSOR

CREATE OR REPLACE FUNCTION F_GET_EMP_CUR
  RETURN SYS_REFCURSOR
IS
  CUR_EMP SYS_REFCURSOR;
  BEGIN
    OPEN CUR_EMP FOR SELECT * FROM EMPLOYEE;
    RETURN CUR_EMP;
  END;
/

DECLARE
  CUR_EMP SYS_REFCURSOR;
  RT_ITERATOR EMPLOYEE%ROWTYPE;
BEGIN
  CUR_EMP:=F_GET_EMP_CUR();
  LOOP
    FETCH CUR_EMP INTO RT_ITERATOR;
    DBMS_OUTPUT.PUT_LINE(RT_ITERATOR.EMPNAME);
    EXIT WHEN CUR_EMP%NOTFOUND;
  END LOOP;
END;
/

-- note Returning Record from procedure

CREATE OR REPLACE PROCEDURE P_GET_EMP_RECORD_FROM_NAME(
  ARG_V_EMP_NAME IN VARCHAR2,
  ARG_EMP_RECORD OUT EMPLOYEE%ROWTYPE
)
IS
  BEGIN
    SELECT * INTO ARG_EMP_RECORD FROM EMPLOYEE WHERE EMPNAME=ARG_V_EMP_NAME;
  END;
/

DECLARE
  EMP_RECORD EMPLOYEE%ROWTYPE;
BEGIN
  P_GET_EMP_RECORD_FROM_NAME('A', EMP_RECORD);
END;

